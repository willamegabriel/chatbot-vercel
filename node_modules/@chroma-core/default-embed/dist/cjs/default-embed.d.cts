import { ProgressCallback } from '@huggingface/transformers';

type DType = "auto" | "fp32" | "fp16" | "q8" | "int8" | "uint8" | "q4" | "bnb4" | "q4f16";
type Quantization = DType | Record<string, DType>;
type EmbeddingFunctionSpace = "cosine" | "l2" | "ip";
interface DefaultEmbeddingFunctionConfig {
    model_name?: string;
    revision?: string;
    dtype?: Quantization;
    quantized?: boolean;
    wasm?: boolean;
}
interface DefaultEmbeddingFunctionArgs {
    modelName?: string;
    revision?: string;
    dtype?: Quantization;
    /** @deprecated Use 'dtype' instead. If set to true, dtype value will be 'uint8' */
    quantized?: boolean;
    wasm?: boolean;
}
declare class DefaultEmbeddingFunction {
    readonly name: string;
    private readonly modelName;
    private readonly revision;
    private readonly dtype;
    private readonly quantized;
    private readonly progressCallback;
    private readonly wasm;
    constructor(args?: Partial<DefaultEmbeddingFunctionArgs & {
        progressCallback: ProgressCallback | undefined;
    }>);
    static buildFromConfig(config: DefaultEmbeddingFunctionConfig): DefaultEmbeddingFunction;
    generate(texts: string[]): Promise<number[][]>;
    defaultSpace(): EmbeddingFunctionSpace;
    supportedSpaces(): EmbeddingFunctionSpace[];
    getConfig(): DefaultEmbeddingFunctionConfig;
    validateConfigUpdate(newConfig: DefaultEmbeddingFunctionConfig): void;
    static validateConfig(config: DefaultEmbeddingFunctionConfig): void;
}

export { type DType, DefaultEmbeddingFunction, type DefaultEmbeddingFunctionArgs, type DefaultEmbeddingFunctionConfig, type EmbeddingFunctionSpace, type Quantization };
