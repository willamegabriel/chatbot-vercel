interface Schema {
    $schema: string;
    title?: string;
    description?: string;
    version?: string;
    type: string;
    properties: Record<string, any>;
    required?: string[];
    additionalProperties?: boolean;
    [key: string]: any;
}
declare const schemaMap: {
    "amazon-bedrock": Schema;
    "base-schema": Schema;
    "chroma-langchain": Schema;
    cohere: Schema;
    default: Schema;
    "google-generative-ai": Schema;
    "google-palm": Schema;
    "google-vertex": Schema;
    huggingface: Schema;
    "huggingface-server": Schema;
    instructor: Schema;
    jina: Schema;
    ollama: Schema;
    "onnx-mini-lm-l6-v2": Schema;
    "open-clip": Schema;
    openai: Schema;
    roboflow: Schema;
    "sentence-transformer": Schema;
    text2vec: Schema;
    transformers: Schema;
    voyageai: Schema;
    "cloudflare-worker-ai": Schema;
    "together-ai": Schema;
    mistral: Schema;
};
/**
 * Load a JSON schema.
 *
 * @param schemaName Name of the schema file (without .json extension)
 * @returns The loaded schema as an object
 * @throws Error if the schema is not available
 */
declare function loadSchema(schemaName: keyof typeof schemaMap): Schema;
/**
 * Validate a configuration against a schema.
 *
 * @param config Configuration to validate
 * @param schemaName Name of the schema file (without .json extension)
 * @throws Error if the configuration does not match the schema
 */
declare function validateConfigSchema(config: Record<string, any>, schemaName: keyof typeof schemaMap): void;
/**
 * Get the version of a schema.
 *
 * @param schemaName Name of the schema file (without .json extension)
 * @returns The schema version as a string
 * @throws Error if the schema file does not exist or is not valid JSON
 */
declare function getSchemaVersion(schemaName: keyof typeof schemaMap): string;
/**
 * Get a list of all available schemas.
 *
 * @returns A list of schema names (without .json extension)
 */
declare function getAvailableSchemas(): (keyof typeof schemaMap)[];
/**
 * Get information about all available schemas.
 *
 * @returns A dictionary mapping schema names to information about the schema
 */
declare function getSchemaInfo(): Record<string, {
    version: string;
    title: string;
    description: string;
}>;

declare const snakeCase: (input: any) => any;
declare const isBrowser: () => boolean;

export { getAvailableSchemas, getSchemaInfo, getSchemaVersion, isBrowser, loadSchema, snakeCase, validateConfigSchema };
