"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  getAvailableSchemas: () => getAvailableSchemas,
  getSchemaInfo: () => getSchemaInfo,
  getSchemaVersion: () => getSchemaVersion,
  isBrowser: () => isBrowser,
  loadSchema: () => loadSchema,
  snakeCase: () => snakeCase,
  validateConfigSchema: () => validateConfigSchema
});
module.exports = __toCommonJS(index_exports);

// ../../../../../schemas/embedding_functions/amazon_bedrock.json
var amazon_bedrock_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Amazon Bedrock Embedding Function Schema",
  description: "Schema for the Amazon Bedrock embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    session_args: {
      type: "object",
      description: "The arguments to pass to the boto3 session"
    },
    model_name: {
      type: "string",
      description: "The name of the model to use for embeddings"
    },
    kwargs: {
      type: "object",
      description: "Additional arguments to pass to the Amazon Bedrock client"
    }
  },
  required: [
    "session_args",
    "model_name",
    "kwargs"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/base_schema.json
var base_schema_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Embedding Function Base Schema",
  description: "Base schema for all embedding functions in Chroma",
  type: "object",
  properties: {
    version: {
      type: "string",
      description: "Schema version for the embedding function"
    },
    name: {
      type: "string",
      description: "Name of the embedding function"
    },
    config: {
      type: "object",
      description: "Configuration parameters for the embedding function"
    }
  },
  required: [
    "version",
    "name",
    "config"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/chroma_langchain.json
var chroma_langchain_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Langchain Embedding Function Schema",
  description: "Schema for the langchain embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    embedding_function: {
      type: "string",
      description: "Parameter embedding_function for the langchain embedding function"
    }
  },
  required: [
    "embedding_function"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/cohere.json
var cohere_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Cohere Embedding Function Schema",
  description: "Schema for the Cohere embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the Cohere API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/default.json
var default_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Default Embedding Function Schema",
  description: "Schema for the default embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {},
  required: [],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/google_generative_ai.json
var google_generative_ai_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Google Generative AI Embedding Function Schema",
  description: "Schema for the Google Generative AI embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    task_type: {
      type: "string",
      description: "The task type for the embeddings (e.g., RETRIEVAL_DOCUMENT)"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the Google Generative AI API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name",
    "task_type"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/google_palm.json
var google_palm_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Google PaLM Embedding Function Schema",
  description: "Schema for the Google PaLM embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the Google PaLM API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/google_vertex.json
var google_vertex_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Google Vertex Embedding Function Schema",
  description: "Schema for the Google Vertex embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    project_id: {
      type: "string",
      description: "The Google Cloud project ID"
    },
    region: {
      type: "string",
      description: "The Google Cloud region"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the Google Vertex API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name",
    "project_id",
    "region"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/huggingface.json
var huggingface_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "HuggingFace Embedding Function Schema",
  description: "Schema for the HuggingFace embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the HuggingFace API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/huggingface_server.json
var huggingface_server_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "HuggingFace Embedding Server Schema",
  description: "Schema for the HuggingFace embedding server configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    url: {
      type: "string",
      description: "The URL of the HuggingFace Embedding Server"
    },
    api_key_env_var: {
      type: "string",
      description: "The environment variable name that contains your API key for the HuggingFace API"
    }
  },
  required: [
    "url"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/instructor.json
var instructor_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Instructor Embedding Function Schema",
  description: "Schema for the instructor embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Parameter model_name for the instructor embedding function"
    },
    device: {
      type: "string",
      description: "Parameter device for the instructor embedding function"
    },
    instruction: {
      type: "string",
      description: "Parameter instruction for the instructor embedding function"
    }
  },
  required: [
    "model_name",
    "device"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/jina.json
var jina_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Jina Embedding Function Schema",
  description: "Schema for the jina embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Parameter model_name for the jina embedding function"
    },
    api_key_env_var: {
      type: "string",
      description: "Parameter api_key_env_var for the jina embedding function"
    },
    task: {
      type: "string",
      description: "Parameter task for the jina embedding function"
    },
    late_chunking: {
      type: "boolean",
      description: "Parameter late_chunking for the jina embedding function"
    },
    truncate: {
      type: "boolean",
      description: "Parameter truncate for the jina embedding function"
    },
    dimensions: {
      type: "integer",
      description: "Parameter dimensions for the jina embedding function"
    },
    embedding_type: {
      type: "string",
      description: "Parameter embedding_type for the jina embedding function"
    },
    normalized: {
      type: "boolean",
      description: "Parameter normalized for the jina embedding function"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/ollama.json
var ollama_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Ollama Embedding Function Schema",
  description: "Schema for the Ollama embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    url: {
      type: "string",
      description: "The URL of the Ollama server"
    },
    model_name: {
      type: "string",
      description: "The name of the model to use for embeddings"
    },
    timeout: {
      type: "integer",
      description: "Timeout in seconds for the API request"
    }
  },
  required: [
    "url",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/onnx_mini_lm_l6_v2.json
var onnx_mini_lm_l6_v2_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Onnx_mini_lm_l6_v2 Embedding Function Schema",
  description: "Schema for the onnx_mini_lm_l6_v2 embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    preferred_providers: {
      type: "array",
      items: {
        type: "string"
      },
      description: "Parameter preferred_providers for the onnx_mini_lm_l6_v2 embedding function"
    }
  },
  required: [],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/open_clip.json
var open_clip_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Open_clip Embedding Function Schema",
  description: "Schema for the open_clip embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Parameter model_name for the open_clip embedding function"
    },
    checkpoint: {
      type: "string",
      description: "Parameter checkpoint for the open_clip embedding function"
    },
    device: {
      type: "string",
      description: "Parameter device for the open_clip embedding function"
    }
  },
  required: [
    "model_name",
    "checkpoint",
    "device"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/openai.json
var openai_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "OpenAI Embedding Function Schema",
  description: "Schema for the OpenAI embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    organization_id: {
      type: [
        "string",
        "null"
      ],
      description: "The OpenAI organization ID if applicable"
    },
    api_base: {
      type: [
        "string",
        "null"
      ],
      description: "The base path for the API"
    },
    api_type: {
      type: [
        "string",
        "null"
      ],
      description: "The type of the API deployment"
    },
    api_version: {
      type: [
        "string",
        "null"
      ],
      description: "The api version for the API"
    },
    deployment_id: {
      type: [
        "string",
        "null"
      ],
      description: "Deployment ID for Azure OpenAI"
    },
    default_headers: {
      type: [
        "object",
        "null"
      ],
      description: "A mapping of default headers to be sent with each API request"
    },
    dimensions: {
      type: [
        "integer",
        "null"
      ],
      description: "The number of dimensions for the embeddings"
    },
    api_key_env_var: {
      type: "string",
      description: "Environment variable name that contains your API key for the OpenAI API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/roboflow.json
var roboflow_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Roboflow Embedding Function Schema",
  description: "Schema for the roboflow embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    api_url: {
      type: "string",
      description: "Parameter api_url for the roboflow embedding function"
    },
    api_key_env_var: {
      type: "string",
      description: "Parameter api_key_env_var for the roboflow embedding function"
    }
  },
  required: [
    "api_key_env_var",
    "api_url"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/sentence_transformer.json
var sentence_transformer_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "SentenceTransformer Embedding Function Schema",
  description: "Schema for the SentenceTransformer embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Identifier of the SentenceTransformer model"
    },
    device: {
      type: "string",
      description: "Device used for computation"
    },
    normalize_embeddings: {
      type: "boolean",
      description: "Whether to normalize returned vectors"
    },
    kwargs: {
      type: "object",
      description: "Additional arguments to pass to the SentenceTransformer model",
      additionalProperties: {
        type: [
          "string",
          "integer",
          "number",
          "boolean",
          "array",
          "object"
        ]
      }
    }
  },
  required: [
    "model_name",
    "device",
    "normalize_embeddings"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/text2vec.json
var text2vec_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Text2vec Embedding Function Schema",
  description: "Schema for the text2vec embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Parameter model_name for the text2vec embedding function"
    }
  },
  required: [
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/transformers.json
var transformers_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Transformers Embedding Function Schema",
  description: "Schema for the Transformers embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model: {
      type: "string",
      description: "Identifier of the SentenceTransformer model"
    },
    revision: {
      type: "string",
      description: "Specific model version to use (can be a branch, tag name, or commit id)"
    },
    quantized: {
      type: "boolean",
      description: "Whether to load the 8-bit quantized version of the model"
    }
  },
  required: [
    "model",
    "revision",
    "quantized"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/voyageai.json
var voyageai_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Voyageai Embedding Function Schema",
  description: "Schema for the voyageai embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "Parameter model_name for the voyageai embedding function"
    },
    api_key_env_var: {
      type: "string",
      description: "Parameter api_key_env_var for the voyageai embedding function"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/cloudflare_workers_ai.json
var cloudflare_workers_ai_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Cloudflare Workers AI Embedding Function Schema",
  description: "Schema for the Cloudflare Workers AI embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    account_id: {
      type: "string",
      description: "The account ID for the Cloudflare Workers AI API"
    },
    api_key_env_var: {
      type: "string",
      description: "The environment variable name that contains your API key for the Cloudflare Workers AI API"
    },
    gateway_id: {
      type: "string",
      description: "The ID of the Cloudflare AI Gateway to use for a more customized solution"
    }
  },
  required: [
    "api_key_env_var",
    "model_name",
    "account_id"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/together_ai.json
var together_ai_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Together AI Embedding Function Schema",
  description: "Schema for the Together AI embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model_name: {
      type: "string",
      description: "The name of the model to use for text embeddings"
    },
    api_key_env_var: {
      type: "string",
      description: "The environment variable name that contains your API key for the Together AI API"
    }
  },
  required: [
    "api_key_env_var",
    "model_name"
  ],
  additionalProperties: false
};

// ../../../../../schemas/embedding_functions/mistral.json
var mistral_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Mistral Embedding Function Schema",
  description: "Schema for the Mistral embedding function configuration",
  version: "1.0.0",
  type: "object",
  properties: {
    model: {
      type: "string",
      description: "Parameter model for the Mistral embedding function"
    },
    api_key_env_var: {
      type: "string",
      description: "Parameter api_key_env_var for the Mistral embedding function"
    }
  },
  required: [
    "api_key_env_var",
    "model"
  ],
  additionalProperties: false
};

// src/schema-utils.ts
var import_ajv = __toESM(require("ajv"));
var ajv = new import_ajv.default({
  strict: false,
  // Allow unknown keywords
  allErrors: true
});
var schemaMap = {
  "amazon-bedrock": amazon_bedrock_default,
  "base-schema": base_schema_default,
  "chroma-langchain": chroma_langchain_default,
  cohere: cohere_default,
  default: default_default,
  "google-generative-ai": google_generative_ai_default,
  "google-palm": google_palm_default,
  "google-vertex": google_vertex_default,
  huggingface: huggingface_default,
  "huggingface-server": huggingface_server_default,
  instructor: instructor_default,
  jina: jina_default,
  ollama: ollama_default,
  "onnx-mini-lm-l6-v2": onnx_mini_lm_l6_v2_default,
  "open-clip": open_clip_default,
  openai: openai_default,
  roboflow: roboflow_default,
  "sentence-transformer": sentence_transformer_default,
  text2vec: text2vec_default,
  transformers: transformers_default,
  voyageai: voyageai_default,
  "cloudflare-worker-ai": cloudflare_workers_ai_default,
  "together-ai": together_ai_default,
  mistral: mistral_default
};
function loadSchema(schemaName) {
  if (!schemaMap[schemaName]) {
    throw new Error(`Schema '${schemaName}' not found`);
  }
  return schemaMap[schemaName];
}
function validateConfigSchema(config, schemaName) {
  const schema = loadSchema(schemaName);
  const validate = ajv.compile(schema);
  const valid = validate(config);
  if (!valid) {
    const errors = validate.errors || [];
    const errorPaths = errors.map((e) => `${e.instancePath || "/"}: ${e.message}`).join(", ");
    throw new Error(
      `Config validation failed for schema '${schemaName}': ${errorPaths}`
    );
  }
}
function getSchemaVersion(schemaName) {
  const schema = loadSchema(schemaName);
  return schema.version || "1.0.0";
}
function getAvailableSchemas() {
  return Object.keys(schemaMap).filter(
    (name) => name !== "base_schema"
  );
}
function getSchemaInfo() {
  const schemaInfo = {};
  for (const schemaName of getAvailableSchemas()) {
    try {
      const schema = schemaMap[schemaName];
      schemaInfo[schemaName] = {
        version: schema.version || "1.0.0",
        title: schema.title || "",
        description: schema.description || ""
      };
    } catch (error) {
      console.error(`Failed to load schema '${schemaName}':`, error);
    }
  }
  return schemaInfo;
}

// src/index.ts
var camelToSnake = (str) => {
  return str.replace(/([A-Z])/g, "_$1").toLowerCase();
};
var snakeCase = (input) => {
  if (Array.isArray(input)) {
    return input.map(snakeCase);
  }
  if (input !== null && typeof input === "object") {
    return Object.fromEntries(
      Object.entries(input).map(([key, value]) => [
        camelToSnake(key),
        snakeCase(value)
      ])
    );
  }
  return input;
};
var isBrowser = () => {
  return typeof window !== "undefined" && typeof window.document !== "undefined";
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAvailableSchemas,
  getSchemaInfo,
  getSchemaVersion,
  isBrowser,
  loadSchema,
  snakeCase,
  validateConfigSchema
});
//# sourceMappingURL=index.js.map